name: ci-auth-back-end-workflow
on: 
    push:
        branches:
            - main

jobs:
    check-application:
        strategy:
            matrix:
                node-version: [19.x]
        runs-on: ubuntu-latest
        
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                node-version: ${{ matrix.node-version }}


            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Login to DockerHub
              uses: docker/login-action@v1 
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push
              id: docker_build
              uses: docker/build-push-action@v2
              with:
                push: true
                tags: ${{ secrets.DOCKERHUB_USERNAME }}/auth:latest

    deploy-application:
        needs: check-application
        runs-on: [ubuntu-latest]
        steps:
          - name: Checkout source
            uses: actions/checkout@v3

          - name: AWS credentials
            uses: aws-actions/configure-aws-credentials@v3
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
              
          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
            with:
              mask-password: 'true'
              
          - name: Build, tag, and push image to Amazon ECR
            id: build-image
            env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              IMAGE_TAG: latest
              REPOSITORY: back-end-auth
            run: |
              # Build a docker container and
              # push it to ECR so that it can
              # be deployed to ECS.
              docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
              docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
              echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT    

          - name: Fill in the new image ID in the Amazon ECS task definition
            id: task-def
            uses: aws-actions/amazon-ecs-render-task-definition@v1
            with:
              task-definition: back-end-auth-task-definition-revision1.json 
              container-name: back-end-auth
              image: ${{ steps.build-image.outputs.image }}   

          - name: Deploy Amazon ECS task definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: back-end-auth-service
              cluster: back-end-auth
              wait-for-service-stability: true